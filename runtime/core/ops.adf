pub trait Index<Idx> {
    type Output

    fn index(&self, index: Idx) -> Self::Output
}

pub trait IndexAssign<Idx>: Index<Idx> {
    fn index_assign(&self, index: Idx, value: Self::Output)
}

pub trait PartialEq {
    // Required method
    fn eq(&self, other: &Self) -> bool;

    // Provided method
    fn ne(&self, other: &Self) -> bool { 
        !self.eq(other)
     }
}

pub trait Eq: PartialEq { }

pub trait Add {
    fn add(self, rhs: Self) -> Self
}

pub trait Sub {
    fn sub(self, rhs: Self) -> Self
}

pub trait Mul {
    fn mul(self, rhs: Self) -> Self
}

pub trait Div {
    fn div(self, rhs: Self) -> Self
}

pub trait Rem {
    fn rem(self, rhs: Self) -> Self
}

pub trait Num: Add + Sub + Mul + Div + Rem {}
