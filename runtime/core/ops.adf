pub trait Index<Idx> {
    type Output

    fn index(&self, index: Idx) -> Self::Output
}

pub trait IndexAssign<Idx>: Index<Idx> {
    fn index_assign(&self, index: Idx, value: Self::Output)
}

pub trait PartialEq {
    // Required method
    fn eq(&self, other: &Self) -> bool;

    // Provided method
    fn ne(&self, other: &Self) -> bool { 
        !self.eq(other)
     }
}

pub trait Eq: PartialEq { }

pub enum Ordering {
    Less = -1,
    Equal = 0,
    Greater = 1,
}

use Ordering::*;

pub trait PartialOrd: PartialEq {
    // Required method
    fn partial_cmp(&self, other: &Self) -> Option<Ordering>

    // Provided methods
    fn lt(&self, other: &Self) -> bool { 
        match self.partial_cmp(other) {
            Some(Less) => true,
            _ => false
        }
     }
    fn le(&self, other: &Self) -> bool { 
        match self.partial_cmp(other) {
            Some(Less|Equal) => true,
            _ => false
        }
     }
    fn gt(&self, other: &Self) -> bool { 
        match self.partial_cmp(other) {
            Some(Greater) => true,
            _ => false
        }
     }
    fn ge(&self, other: &Self) -> bool { 
        match self.partial_cmp(other) {
            Some(Greater|Equal) => true,
            _ => false
        }
     }
}

pub trait Add {
    fn add(self, rhs: Self) -> Self
}

pub trait Sub {
    fn sub(self, rhs: Self) -> Self
}

pub trait Mul {
    fn mul(self, rhs: Self) -> Self
}

pub trait Div {
    fn div(self, rhs: Self) -> Self
}

pub trait Rem {
    fn rem(self, rhs: Self) -> Self
}

pub trait And {
    fn and(self, other: Self) -> Self
}

pub trait Or {
    fn or(self, other: Self) -> Self
}

pub trait Xor {
    fn xor(self, other: Self) -> Self
}

pub trait Neg {
    fn neg(self) -> Self
}

pub trait Not {
    fn not(self) -> Self
}
