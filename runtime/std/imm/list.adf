pub enum List<T> {
    Empty,
    Cons(T, &List<T>)
}

use List::*

impl<T> List<T> {
    pub fn len(self) -> usize {
        fn aux(list, len) {
            match list {
                Empty => len,
                Cons(_, list) => aux(*list, len + 1)
            }
        }

        aux(self, 0)
    }

    pub fn head(self) -> Option<T> {
        match self {
            Empty => None,
            Cons(t, _) => t
        }
    }

    pub fn tail(self) -> Option<T> {
        match self {
            Empty => None,
            Cons(t, List::Empty) => t,
            Cons(t, l) => l.tail()
        }
    }

    pub fn cons(&self, value: T) -> Self {
        Cons(value, self)
    }
}
