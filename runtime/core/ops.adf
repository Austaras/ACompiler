pub trait Index<Idx> {
    type Output

    fn index(&self, index: Idx) -> Self::Output
}

pub trait IndexAssign<Idx>: Index<Idx> {
    type Value

    fn index(&self, index: Idx, value: Value)
}

pub trait Add {
    fn add(self, rhs: Self) -> Self
}

pub trait Sub {
    fn sub(self, rhs: Self) -> Self
}

pub trait Mul {
    fn mul(self, rhs: Self) -> Self
}

pub trait Div {
    fn div(self, rhs: Self) -> Self
}

pub trait Mod {
    fn add(self, rhs: Self) -> Self
}

pub trait Num: Add + Sub + Mul + Div + Mod {}
