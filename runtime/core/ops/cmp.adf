pub trait PartialEq {
    // Required method
    fn eq(&self, other: Self) -> bool

    // Provided method
    fn ne(&self, other: Self) -> bool { 
        !self.eq(other)
    }
}

pub trait Eq: PartialEq { }

impl PartialEq for bool {
    #[compiler_builtin]
    fn eq(self, rhs: Self) -> bool { }
}

impl PartialEq for int {
    #[compiler_builtin]
    fn eq(self, rhs: Self) -> bool { }
}

impl PartialEq for uint {
    #[compiler_builtin]
    fn eq(self, rhs: Self) -> bool { }
}

pub enum Ordering {
    Less = -1,
    Equal = 0,
    Greater = 1,
}

pub trait PartialOrd: PartialEq {
    // Required method
    fn partial_cmp(&self, other: &Self) -> Option<Ordering>

    // Provided methods
    fn lt(&self, other: &Self) -> bool { 
        match self.partial_cmp(other) {
            Some(Less) => true,
            _ => false
        }
    }
    fn le(&self, other: &Self) -> bool { 
        match self.partial_cmp(other) {
            Some(Less|Equal) => true,
            _ => false
        }
    }
    fn gt(&self, other: &Self) -> bool { 
        match self.partial_cmp(other) {
            Some(Greater) => true,
            _ => false
        }
    }
    fn ge(&self, other: &Self) -> bool { 
        match self.partial_cmp(other) {
            Some(Greater|Equal) => true,
            _ => false
        }
    }
}
